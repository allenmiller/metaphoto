AWSTemplateFormatVersion: '2010-09-09'
Description: Shared infrastructure for Tanker, including build pipelines, dynamodb tables, S3 buckets, and IAM roles

Mappings:
  DynamoDb:
    Gsi1Name:
      Name: GSI_1

Parameters:
  Environment:
    AllowedValues:
      - dev
      - prod
    Description: 'Environment'
    Type: 'String'
    Default: 'dev'

  GitHubOAuthToken:
    Type: String
    NoEcho: true
    MinLength: 40
    MaxLength: 40
    AllowedPattern: '[a-z0-9]*'

  GitHubOwner:
    Type: String
    Default: allenmiller
    AllowedPattern: "[A-Za-z0-9-]+"

  GitHubApiRepo:
    Type: String
    Default: tanker-api
    AllowedPattern: "[A-Za-z0-9-]+"

  GitHubWebappRepo:
    Type: String
    Default: tanker-webapp
    AllowedPattern: "[A-Za-z0-9-]+"

  GitHubBranch:
    Type: String
    Default: master
    AllowedPattern: "[A-Za-z0-9-]+"

  ApplicationStackName:
    Type: String
    Default: tanker
    AllowedPattern: "[A-Za-z0-9-]+"

  HostedZoneDnsName:
    Type: String
    Default: tank.ajmiller.net

  UsEast1CertificateArn:
    Type: String
    Description: ARN of certificate in us-east-1 for use by Cloudfront

  ReadCapacityUnits:
    Type: String
    Default: 1
    Description: DynamoDB read capacity

  WriteCapacityUnits:
    Type: String
    Default: 1
    Description: DynamoDB write capacity

  DynamoDBTableName:
    Type: String
    Default: tanker-dynamodb
    Description: Dynamo table name, concatinated with -{Environment}

Resources:
  TankerPipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  TankerDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  MediaDynamoDbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ["-", [!Ref DynamoDBTableName, !Ref Environment]]
      AttributeDefinitions:
        - AttributeName: primaryHashKey
          AttributeType: S
        - AttributeName: primaryRangeKey
          AttributeType: S
        - AttributeName: gsi1HashKey
          AttributeType: S
        - AttributeName: gsi1RangeKey
          AttributeType: S
      KeySchema:
        - AttributeName: primaryHashKey
          KeyType: HASH
        - AttributeName: primaryRangeKey
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: !FindInMap [DynamoDb, Gsi1Name, Name]
          KeySchema:
            - AttributeName: gsi1HashKey
              KeyType: HASH
            - AttributeName: gsi1RangeKey
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref ReadCapacityUnits
            WriteCapacityUnits: !Ref WriteCapacityUnits
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref ReadCapacityUnits
        WriteCapacityUnits: !Ref WriteCapacityUnits
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join ["-", [tanker-user-pool, !Ref Environment]]
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Join ["-", [tanker-user-pool-client, !Ref Environment]]
      UserPoolId:
        Ref: CognitoUserPool
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      GenerateSecret: false

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Join ["_", [TankerIdentityPool, !Ref Environment]]
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName

  TankerHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: Hosted zone for tanker
      Name: !Ref HostedZoneDnsName

  TankerRoute53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Comment: Record set for tanker.
      HostedZoneId: !Ref TankerHostedZone
      Name: !Ref HostedZoneDnsName
      Type: A
      AliasTarget:
        DNSName: !GetAtt TankerDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget-1.html

  TlsCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join [".", ["*", !Ref HostedZoneDnsName]]
      ValidationMethod: DNS
      SubjectAlternativeNames:
        - !Join [".", ["*", !Ref HostedZoneDnsName]]
        - !Ref HostedZoneDnsName

  TankerDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        PriceClass: PriceClass_100
        Aliases:
          - !Ref HostedZoneDnsName
        ViewerCertificate:
          AcmCertificateArn: !Ref UsEast1CertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
        Origins:
          -
            # Use the DeployBucket as the CDN origin
            DomainName: !GetAtt TankerPipelineArtifactsBucket.DomainName
            Id: !Ref TankerPipelineArtifactsBucket
            S3OriginConfig:
              OriginAccessIdentity: ''
        DefaultRootObject: index.html
        Enabled: true
        # Configure the caching behavior for our CDN
        DefaultCacheBehavior:
          MinTTL: 86400  # 1 day
          MaxTTL: 31536000  # 1 year
          ForwardedValues:
            QueryString: true
          TargetOriginId: !Ref TankerPipelineArtifactsBucket
          ViewerProtocolPolicy: "redirect-to-https"   # we want to force HTTPS

  ApiCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: TankerApiCodeBuildProject
      Description: Set up the tanker API
      ServiceRole: !Ref ApiCodeBuildRole
      TimeoutInMinutes: 5
      Source:
        Type: CODEPIPELINE
        BuildSpec: api/buildspec.yml
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:10.1.0
      Artifacts:
        Type: CODEPIPELINE

  WebAppCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: TankerWebAppCodeBuildProject
      ServiceRole: !Ref WebAppCodeBuildRole
      Artifacts:
        Type: CODEPIPELINE
        Name: WebAppArtifact
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: aws/codebuild/nodejs:10.1.0
        EnvironmentVariables:
          - Name: DeployBucket
            Value: !Ref TankerPipelineArtifactsBucket
          - Name: Distribution
            Value: !Ref TankerDistribution
          - Name: REACT_APP_USER_POOL_ID
            Value: !Ref CognitoUserPool
          - Name: REACT_APP_USER_POOL_CLIENT_ID
            Value: !Ref CognitoUserPoolClient
          - Name: REACT_APP_IDENTITY_POOL_ID
            Value: !Ref CognitoIdentityPool
          - Name: REACT_APP_REGION
            Value: !Ref AWS::Region
          - Name: REACT_APP_DATA_BUCKET
            Value: !Ref TankerDataBucket
#          - Name: REACT_APP_API_URL
#            Value: !ImportValue TankerApiUrl  # Cross-stack dependency
          - Name: REACT_APP_ENV
            Value: !Ref Environment
      Source:
        Type: CODEPIPELINE
        BuildSpec: tanker-webapp/buildspec.yml

  ApiCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: TankerApiPipeline
      ArtifactStore:
        Type: S3
        Location: !Ref TankerPipelineArtifactsBucket
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: ApiSource
              InputArtifacts: []
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: ApiSourceCode
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubApiRepo
                Branch: !Ref GitHubBranch
                PollForSourceChanges: false
                OAuthToken: !Ref GitHubOAuthToken
              RunOrder: 1

        - Name: BuildAndDeploy
          Actions:
            - Name: Api
              RunOrder: 1
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: ApiSourceCode
              Configuration:
                ProjectName: !Ref ApiCodeBuildProject

  WebappCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: TankerWebappPipeline
      ArtifactStore:
        Type: S3
        Location: !Ref TankerPipelineArtifactsBucket
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: WebappSource
              InputArtifacts: []
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: WebappSourceCode
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubWebappRepo
                Branch: !Ref GitHubBranch
                PollForSourceChanges: false
                OAuthToken: !Ref GitHubOAuthToken
              RunOrder: 1

        - Name: BuildAndDeploy
          Actions:
            - Name: WebApp
              RunOrder: 1
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: WebappSourceCode
              OutputArtifacts:
                - Name: DeployedWebApp
              Configuration:
                ProjectName: !Ref WebAppCodeBuildProject

  ApiGithubWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken
      RegisterWithThirdParty: 'true'
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref ApiCodePipeline
      TargetAction: ApiSource
      TargetPipelineVersion: !GetAtt ApiCodePipeline.Version

  WebappGithubWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken
      RegisterWithThirdParty: 'true'
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref WebappCodePipeline
      TargetAction: WebappSource
      TargetPipelineVersion: !GetAtt WebappCodePipeline.Version

  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        'Fn::Join': [ "-", ["CodeBuildRole", !Ref 'AWS::StackName', !Ref 'Environment']]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codebuild.amazonaws.com"
          Action: "sts:AssumeRole"

  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Join [ "-", ["CodePipelineRole", !Ref 'AWS::StackName', !Ref 'Environment']]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codepipeline.amazonaws.com"
          Action: "sts:AssumeRole"

  DynamoDbCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", ["DynamoDbCodeBuildRole", !Ref "AWS::StackName"] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codebuild.amazonaws.com"
          Action: "sts:AssumeRole"

  ApiCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", ["ApiCodeBuildRole", !Ref "AWS::StackName"] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codebuild.amazonaws.com"
          Action: "sts:AssumeRole"

  WebAppCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", ["WebAppCodeBuildRole", !Ref "AWS::StackName"] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codebuild.amazonaws.com"
          Action: "sts:AssumeRole"

  DynamoDBCodeBuildPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join [ "-", ["DynamoDbCodeBuildPolicy", !Ref "AWS::StackName"] ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - DynamoDB:CreateTable
            - DynamoDB:DescribeTable
            - DynamoDB:TagResource
          Resource: "*"
      Roles:
        - !Ref DynamoDbCodeBuildRole

  LoggingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        'Fn::Join': [ "-", ["LoggingPolicy", !Ref 'AWS::StackName', !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - logs:FilterLogEvents
            - logs:DescribeLogStreams
            - logs:DeleteLogGroup
          Resource: "*"
      Roles:
        - !Ref DynamoDbCodeBuildRole
        - !Ref ApiCodeBuildRole
        - !Ref WebAppCodeBuildRole

  CodebuildCloudformationPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        'Fn::Join': [ "-", ["CodebuildCloudformationPolicy", !Ref 'AWS::StackName', !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - Cloudformation:DescribeStacks
            - Cloudformation:DescribeStackEvents
            - Cloudformation:DescribeStackResource
            - Cloudformation:ListStackResources
            - Cloudformation:ValidateTemplate
            - Cloudformation:CreateStack
            - Cloudformation:CreateUploadBucket
            - Cloudformation:DeleteStack
            - Cloudformation:UpdateStack
          Resource: "*"
      Roles:
        - !Ref DynamoDbCodeBuildRole
        - !Ref ApiCodeBuildRole

  S3BuildRolesPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "-", ["S3PutGetPolicy", !Ref 'AWS::StackName', !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - S3:GetBucketLocation
            Resource: "arn:aws:s3:::*"
          - Effect: Allow
            Action:
              - S3:ListBucket
            Resource: !Join ["", ["arn:aws:s3:::", !Ref TankerPipelineArtifactsBucket]]
          - Effect: Allow
            Action:
              - S3:GetObject
              - S3:PutObject
              - S3:DeleteObject
              - S3:PutObjectAcl
            Resource: !Join ["", ["arn:aws:s3:::", !Ref TankerPipelineArtifactsBucket, "/*" ]]
      Roles:
        - !Ref DynamoDbCodeBuildRole
        - !Ref ApiCodeBuildRole
        - !Ref WebAppCodeBuildRole

  LambdaCodeBuildPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "-", ["LambdaCodeBuildPolicy", !Ref 'AWS::StackName', !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - ACM:ListCertificates
            - IAM:CreateRole
            - IAM:CreateServiceLinkedRole
            - IAM:GetRole
            - IAM:GetRolePolicy
            - IAM:PutRolePolicy
            - IAM:DeleteRolePolicy
            - IAM:DeleteRole
            - IAM:PassRole
            - apigateway:GET
            - apigateway:POST
            - apigateway:PUT
            - apigateway:DELETE
            - apigateway:PATCH
            - Cloudformation:GET
            - lambda:Get*
            - lambda:List*
            - lambda:CreateFunction
            - lambda:AddPermission
            - lambda:CreateAlias
            - lambda:DeleteFunction
            - lambda:InvokeFunction
            - lambda:PublishVersion
            - lambda:RemovePermission
            - lambda:UpdateFunctionCode
            - lambda:UpdateFunctionConfiguration
            - Route53:ListHostedZones
            - Route53:ChangeResourceRecordSets
            - Route53:GetHostedZone
            - Route53:ListResourceRecordSets
          Resource: "*"
      Roles:
        - !Ref ApiCodeBuildRole

  CloudFrontDistributionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        'Fn::Join': [ "-", ["CloudfrontBuildPolicy", !Ref 'AWS::StackName', !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - Cloudfront:UpdateDistribution
            - Cloudfront:CreateInvalidation
          Resource: "*"
      Roles:
        - !Ref ApiCodeBuildRole
        - !Ref WebAppCodeBuildRole

  CodeBuildPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "", ["CodeBuildPolicy", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - codebuild:*
            - s3:DeleteBucket
            - s3:ListBucketVersions
            - cloudwatch:GetMetricStatistics
            - events:Put*
            - events:Remove*
            - events:Delete*
          Resource: "*"
      Roles:
        - !Ref CodeBuildRole

  CodePipelinePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "-", ["CodePipelinePolicy", !Ref 'AWS::StackName', !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:*
            - codebuild:*
          Resource:
            - "*"
      Roles:
        - !Ref CodePipelineRole
  # IAM roles
  CognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: CognitoIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt: [CognitoAuthRole, Arn]

  # IAM role used for authenticated users
  CognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: CognitoIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: 'CognitoAuthorizedPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: '*'

              # Allow users to invoke our API
              - Effect: 'Allow'
                Action:
                  - 'execute-api:Invoke'
                Resource: '*'

              # Allow users to upload attachments to their
              # folder inside our S3 bucket
              - Effect: 'Allow'
                Action:
                  - 's3:*'
                Resource:
                  - Fn::Join:
                      - ''
                      -
                        - Fn::GetAtt: [TankerDataBucket, Arn]
                        - '/private/'
                        - '$'
                        - '{cognito-identity.amazonaws.com:sub}/*'
Outputs:
  UserPoolId:
    Value: !Ref CognitoUserPool

  UserPoolClientId:
    Value: !Ref CognitoUserPoolClient

  IdentityPoolId:
    Value: !Ref CognitoIdentityPool

  TankerHostedZone:
    Description: Domain name for application
    Value: !Ref HostedZoneDnsName
    Export:
      Name: !Join ['-', [TankerHostedZone, !Ref Environment]]

  TankerPipelineArtifactsBucket:
    Description: Bucket to hold build artifacts
    Value: !Ref TankerPipelineArtifactsBucket
    Export:
      Name: !Join ['-', [TankerPipelineArtifactsBucket, !Ref Environment]]

  TankerDataBucket:
    Description: Holds application data such as photos, film specs, etc.
    Value: !Ref TankerDataBucket
    Export:
      Name: !Join ['-', [TankerDataBucket, !Ref Environment]]

  TankerHostedZoneNameServers:
    Description: Hosted zone for !Ref HostedZoneDnsName
    Value: !Join
      - ' '
      - !GetAtt TankerHostedZone.NameServers
    Export:
      Name: !Join ['-', [TankerHostedZoneNameServers, !Ref Environment]]

  TankerCertificateArn:
    Description: ARN for the certificate
    Value: !Ref TlsCertificate
    Export:
      Name: !Join ['-', [TankerTlsCertificateArn, !Ref Environment]]

  MediaTableArn:
    Value: !GetAtt MediaDynamoDbTable.Arn
    Export:
      Name: !Join ['-', [TankerMediaTableArn, !Ref Environment]]

  MediaTableName:
    Value: !Ref MediaDynamoDbTable
    Export:
      Name: !Join ['-', [TankerMediaTableName, !Ref Environment]]

  MediaTableGSI1:
    Value: !FindInMap [DynamoDb, Gsi1Name, Name]
    Export:
      Name: !Join ['-', [TankerMediaTableGSI1, !Ref Environment]]

  Region:
    Value: !Ref AWS::Region
    Export:
      Name: !Join ['-', [TankerRegion, !Ref Environment]]

  Token:
    Value: '{{resolve:secretsmanager:GithubToken}}'
